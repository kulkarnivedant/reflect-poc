// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.26.1
// source: reflect.proto

package service_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TestService_Test_FullMethodName             = "/reflect.TestService/Test"
	TestService_TestServerStream_FullMethodName = "/reflect.TestService/TestServerStream"
	TestService_TestClientStream_FullMethodName = "/reflect.TestService/TestClientStream"
	TestService_TestBidiStream_FullMethodName   = "/reflect.TestService/TestBidiStream"
	TestService_Run_FullMethodName              = "/reflect.TestService/Run"
)

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestServiceClient interface {
	Test(ctx context.Context, in *TestMessageRequest, opts ...grpc.CallOption) (*TestMessageResponse, error)
	TestServerStream(ctx context.Context, in *TestMessageRequest, opts ...grpc.CallOption) (TestService_TestServerStreamClient, error)
	TestClientStream(ctx context.Context, opts ...grpc.CallOption) (TestService_TestClientStreamClient, error)
	TestBidiStream(ctx context.Context, opts ...grpc.CallOption) (TestService_TestBidiStreamClient, error)
	Run(ctx context.Context, in *RunMessageRequest, opts ...grpc.CallOption) (*RunMessageResponse, error)
}

type testServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServiceClient(cc grpc.ClientConnInterface) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) Test(ctx context.Context, in *TestMessageRequest, opts ...grpc.CallOption) (*TestMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestMessageResponse)
	err := c.cc.Invoke(ctx, TestService_Test_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) TestServerStream(ctx context.Context, in *TestMessageRequest, opts ...grpc.CallOption) (TestService_TestServerStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[0], TestService_TestServerStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceTestServerStreamClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestService_TestServerStreamClient interface {
	Recv() (*TestMessageResponse, error)
	grpc.ClientStream
}

type testServiceTestServerStreamClient struct {
	grpc.ClientStream
}

func (x *testServiceTestServerStreamClient) Recv() (*TestMessageResponse, error) {
	m := new(TestMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) TestClientStream(ctx context.Context, opts ...grpc.CallOption) (TestService_TestClientStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[1], TestService_TestClientStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceTestClientStreamClient{ClientStream: stream}
	return x, nil
}

type TestService_TestClientStreamClient interface {
	Send(*TestMessageRequest) error
	CloseAndRecv() (*TestMessageResponse, error)
	grpc.ClientStream
}

type testServiceTestClientStreamClient struct {
	grpc.ClientStream
}

func (x *testServiceTestClientStreamClient) Send(m *TestMessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServiceTestClientStreamClient) CloseAndRecv() (*TestMessageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TestMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) TestBidiStream(ctx context.Context, opts ...grpc.CallOption) (TestService_TestBidiStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[2], TestService_TestBidiStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceTestBidiStreamClient{ClientStream: stream}
	return x, nil
}

type TestService_TestBidiStreamClient interface {
	Send(*TestMessageRequest) error
	Recv() (*TestMessageResponse, error)
	grpc.ClientStream
}

type testServiceTestBidiStreamClient struct {
	grpc.ClientStream
}

func (x *testServiceTestBidiStreamClient) Send(m *TestMessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServiceTestBidiStreamClient) Recv() (*TestMessageResponse, error) {
	m := new(TestMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) Run(ctx context.Context, in *RunMessageRequest, opts ...grpc.CallOption) (*RunMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunMessageResponse)
	err := c.cc.Invoke(ctx, TestService_Run_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServiceServer is the server API for TestService service.
// All implementations must embed UnimplementedTestServiceServer
// for forward compatibility
type TestServiceServer interface {
	Test(context.Context, *TestMessageRequest) (*TestMessageResponse, error)
	TestServerStream(*TestMessageRequest, TestService_TestServerStreamServer) error
	TestClientStream(TestService_TestClientStreamServer) error
	TestBidiStream(TestService_TestBidiStreamServer) error
	Run(context.Context, *RunMessageRequest) (*RunMessageResponse, error)
	mustEmbedUnimplementedTestServiceServer()
}

// UnimplementedTestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestServiceServer struct {
}

func (UnimplementedTestServiceServer) Test(context.Context, *TestMessageRequest) (*TestMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedTestServiceServer) TestServerStream(*TestMessageRequest, TestService_TestServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TestServerStream not implemented")
}
func (UnimplementedTestServiceServer) TestClientStream(TestService_TestClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TestClientStream not implemented")
}
func (UnimplementedTestServiceServer) TestBidiStream(TestService_TestBidiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TestBidiStream not implemented")
}
func (UnimplementedTestServiceServer) Run(context.Context, *RunMessageRequest) (*RunMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedTestServiceServer) mustEmbedUnimplementedTestServiceServer() {}

// UnsafeTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServiceServer will
// result in compilation errors.
type UnsafeTestServiceServer interface {
	mustEmbedUnimplementedTestServiceServer()
}

func RegisterTestServiceServer(s grpc.ServiceRegistrar, srv TestServiceServer) {
	s.RegisterService(&TestService_ServiceDesc, srv)
}

func _TestService_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_Test_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).Test(ctx, req.(*TestMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_TestServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TestMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServiceServer).TestServerStream(m, &testServiceTestServerStreamServer{ServerStream: stream})
}

type TestService_TestServerStreamServer interface {
	Send(*TestMessageResponse) error
	grpc.ServerStream
}

type testServiceTestServerStreamServer struct {
	grpc.ServerStream
}

func (x *testServiceTestServerStreamServer) Send(m *TestMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TestService_TestClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).TestClientStream(&testServiceTestClientStreamServer{ServerStream: stream})
}

type TestService_TestClientStreamServer interface {
	SendAndClose(*TestMessageResponse) error
	Recv() (*TestMessageRequest, error)
	grpc.ServerStream
}

type testServiceTestClientStreamServer struct {
	grpc.ServerStream
}

func (x *testServiceTestClientStreamServer) SendAndClose(m *TestMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServiceTestClientStreamServer) Recv() (*TestMessageRequest, error) {
	m := new(TestMessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestService_TestBidiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).TestBidiStream(&testServiceTestBidiStreamServer{ServerStream: stream})
}

type TestService_TestBidiStreamServer interface {
	Send(*TestMessageResponse) error
	Recv() (*TestMessageRequest, error)
	grpc.ServerStream
}

type testServiceTestBidiStreamServer struct {
	grpc.ServerStream
}

func (x *testServiceTestBidiStreamServer) Send(m *TestMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServiceTestBidiStreamServer) Recv() (*TestMessageRequest, error) {
	m := new(TestMessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestService_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_Run_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).Run(ctx, req.(*RunMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestService_ServiceDesc is the grpc.ServiceDesc for TestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reflect.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _TestService_Test_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _TestService_Run_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TestServerStream",
			Handler:       _TestService_TestServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TestClientStream",
			Handler:       _TestService_TestClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "TestBidiStream",
			Handler:       _TestService_TestBidiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "reflect.proto",
}

const (
	SyncService_Sync_FullMethodName             = "/reflect.SyncService/Sync"
	SyncService_SyncServerStream_FullMethodName = "/reflect.SyncService/SyncServerStream"
	SyncService_SyncClientStream_FullMethodName = "/reflect.SyncService/SyncClientStream"
	SyncService_SyncBidiStream_FullMethodName   = "/reflect.SyncService/SyncBidiStream"
)

// SyncServiceClient is the client API for SyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyncServiceClient interface {
	Sync(ctx context.Context, in *SyncMessageRequest, opts ...grpc.CallOption) (*SyncMessageResponse, error)
	SyncServerStream(ctx context.Context, in *SyncMessageRequest, opts ...grpc.CallOption) (SyncService_SyncServerStreamClient, error)
	SyncClientStream(ctx context.Context, opts ...grpc.CallOption) (SyncService_SyncClientStreamClient, error)
	SyncBidiStream(ctx context.Context, opts ...grpc.CallOption) (SyncService_SyncBidiStreamClient, error)
}

type syncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncServiceClient(cc grpc.ClientConnInterface) SyncServiceClient {
	return &syncServiceClient{cc}
}

func (c *syncServiceClient) Sync(ctx context.Context, in *SyncMessageRequest, opts ...grpc.CallOption) (*SyncMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncMessageResponse)
	err := c.cc.Invoke(ctx, SyncService_Sync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServiceClient) SyncServerStream(ctx context.Context, in *SyncMessageRequest, opts ...grpc.CallOption) (SyncService_SyncServerStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SyncService_ServiceDesc.Streams[0], SyncService_SyncServerStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &syncServiceSyncServerStreamClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SyncService_SyncServerStreamClient interface {
	Recv() (*SyncMessageResponse, error)
	grpc.ClientStream
}

type syncServiceSyncServerStreamClient struct {
	grpc.ClientStream
}

func (x *syncServiceSyncServerStreamClient) Recv() (*SyncMessageResponse, error) {
	m := new(SyncMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *syncServiceClient) SyncClientStream(ctx context.Context, opts ...grpc.CallOption) (SyncService_SyncClientStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SyncService_ServiceDesc.Streams[1], SyncService_SyncClientStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &syncServiceSyncClientStreamClient{ClientStream: stream}
	return x, nil
}

type SyncService_SyncClientStreamClient interface {
	Send(*SyncMessageRequest) error
	CloseAndRecv() (*SyncMessageResponse, error)
	grpc.ClientStream
}

type syncServiceSyncClientStreamClient struct {
	grpc.ClientStream
}

func (x *syncServiceSyncClientStreamClient) Send(m *SyncMessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *syncServiceSyncClientStreamClient) CloseAndRecv() (*SyncMessageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SyncMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *syncServiceClient) SyncBidiStream(ctx context.Context, opts ...grpc.CallOption) (SyncService_SyncBidiStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SyncService_ServiceDesc.Streams[2], SyncService_SyncBidiStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &syncServiceSyncBidiStreamClient{ClientStream: stream}
	return x, nil
}

type SyncService_SyncBidiStreamClient interface {
	Send(*SyncMessageRequest) error
	Recv() (*SyncMessageResponse, error)
	grpc.ClientStream
}

type syncServiceSyncBidiStreamClient struct {
	grpc.ClientStream
}

func (x *syncServiceSyncBidiStreamClient) Send(m *SyncMessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *syncServiceSyncBidiStreamClient) Recv() (*SyncMessageResponse, error) {
	m := new(SyncMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SyncServiceServer is the server API for SyncService service.
// All implementations must embed UnimplementedSyncServiceServer
// for forward compatibility
type SyncServiceServer interface {
	Sync(context.Context, *SyncMessageRequest) (*SyncMessageResponse, error)
	SyncServerStream(*SyncMessageRequest, SyncService_SyncServerStreamServer) error
	SyncClientStream(SyncService_SyncClientStreamServer) error
	SyncBidiStream(SyncService_SyncBidiStreamServer) error
	mustEmbedUnimplementedSyncServiceServer()
}

// UnimplementedSyncServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSyncServiceServer struct {
}

func (UnimplementedSyncServiceServer) Sync(context.Context, *SyncMessageRequest) (*SyncMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedSyncServiceServer) SyncServerStream(*SyncMessageRequest, SyncService_SyncServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncServerStream not implemented")
}
func (UnimplementedSyncServiceServer) SyncClientStream(SyncService_SyncClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncClientStream not implemented")
}
func (UnimplementedSyncServiceServer) SyncBidiStream(SyncService_SyncBidiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncBidiStream not implemented")
}
func (UnimplementedSyncServiceServer) mustEmbedUnimplementedSyncServiceServer() {}

// UnsafeSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncServiceServer will
// result in compilation errors.
type UnsafeSyncServiceServer interface {
	mustEmbedUnimplementedSyncServiceServer()
}

func RegisterSyncServiceServer(s grpc.ServiceRegistrar, srv SyncServiceServer) {
	s.RegisterService(&SyncService_ServiceDesc, srv)
}

func _SyncService_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncService_Sync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).Sync(ctx, req.(*SyncMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncService_SyncServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SyncServiceServer).SyncServerStream(m, &syncServiceSyncServerStreamServer{ServerStream: stream})
}

type SyncService_SyncServerStreamServer interface {
	Send(*SyncMessageResponse) error
	grpc.ServerStream
}

type syncServiceSyncServerStreamServer struct {
	grpc.ServerStream
}

func (x *syncServiceSyncServerStreamServer) Send(m *SyncMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SyncService_SyncClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SyncServiceServer).SyncClientStream(&syncServiceSyncClientStreamServer{ServerStream: stream})
}

type SyncService_SyncClientStreamServer interface {
	SendAndClose(*SyncMessageResponse) error
	Recv() (*SyncMessageRequest, error)
	grpc.ServerStream
}

type syncServiceSyncClientStreamServer struct {
	grpc.ServerStream
}

func (x *syncServiceSyncClientStreamServer) SendAndClose(m *SyncMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *syncServiceSyncClientStreamServer) Recv() (*SyncMessageRequest, error) {
	m := new(SyncMessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SyncService_SyncBidiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SyncServiceServer).SyncBidiStream(&syncServiceSyncBidiStreamServer{ServerStream: stream})
}

type SyncService_SyncBidiStreamServer interface {
	Send(*SyncMessageResponse) error
	Recv() (*SyncMessageRequest, error)
	grpc.ServerStream
}

type syncServiceSyncBidiStreamServer struct {
	grpc.ServerStream
}

func (x *syncServiceSyncBidiStreamServer) Send(m *SyncMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *syncServiceSyncBidiStreamServer) Recv() (*SyncMessageRequest, error) {
	m := new(SyncMessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SyncService_ServiceDesc is the grpc.ServiceDesc for SyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reflect.SyncService",
	HandlerType: (*SyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sync",
			Handler:    _SyncService_Sync_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncServerStream",
			Handler:       _SyncService_SyncServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SyncClientStream",
			Handler:       _SyncService_SyncClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SyncBidiStream",
			Handler:       _SyncService_SyncBidiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "reflect.proto",
}
